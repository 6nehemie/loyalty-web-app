generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String        @id @default(cuid())
  email              String        @unique
  civility           String
  firstName          String
  lastName           String
  conditions         Boolean?
  privacy            Boolean?
  newsletter         Boolean?
  phoneNumber        String?
  country            String?
  addressLine1       String?
  addressLine2       String?
  city               String?
  postalCode         String?
  password           String
  role               String        @default("USER")
  emailCodeReset     String?
  passwordCodeReset  String?
  currentReservation String?
  reservations       Reservation[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt // Updtate automatically when an update is made
}

model Car {
  id                String        @id @default(cuid())
  brand             String
  model             String
  year              String?
  wallpaper         String?
  shortDescription  String?
  wallpaperPublicId String?
  carImage          String?
  carImagePublicId  String?
  minAge            String?
  price             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt // Updtate automatically when an update is made
  Reservation       Reservation[]
}

model Vehicule {
  id                String   @id @default(cuid())
  productId         String
  title             String
  make              String
  model             String
  shortDescription  String   @db.Text
  description       String   @db.Text
  embeddedVideo     String   @db.Text
  carImage          String
  carImagePublicId  String
  wallpaper         String
  wallpaperPublicId String
  dailyPrice        Int
  weeklyPrice       Int?
  weekendPrice      Int?
  monthlyPrice      Int?
  caution           Int
  minimumAge        Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt // Updtate automatically when an update is made
}

enum PaymentStatus {
  Pending
  Processing
  Completed
  Failed
}

model Reservation {
  id                      String        @id @default(cuid())
  user                    User          @relation(fields: [userId], references: [id])
  userId                  String
  car                     Car?          @relation(fields: [carId], references: [id])
  carId                   String?
  startDate               DateTime?
  endDate                 DateTime?
  checkoutSessionId       String?
  rentalDays              Int?
  rentalPrice             Int?
  additionalDriverPrice   Int?
  additionalDriver        Boolean       @default(false)
  fufilled                Boolean       @default(false)
  paymentStatus           PaymentStatus @default(Pending)
  identityCard            String?
  identityCardPublicId    String?
  driverLicense           String?
  driverLicensePublicId   String?
  totalPrice              Int?
  homeCertificate         String?
  homeCertificatePublicId String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt // Updtate automatically when an update is made

  @@index([userId, carId])
}
